(define (domain miconic)
(:requirements :typing :hierachie )
(:types
    Floor Person - Object
)

(:predicates
    (boarded ?p - Person)
    (goal ?p - Person)
    (lift-at ?f - Floor)
    (origin ?p - Person ?o - Floor)
    (destination ?p - Person ?d - Floor)
)

(:task solve-elevator
    :parameters ()
)

(:task deliver-person
    :parameters (?p - Person ?o ?d - Floor)
)

(:method m1-abort
    :parameters ()
    :task (solve-elevator)
    :precondition (forall (?p - Person) (not (goal ?p)))
    :subtasks ( )
)

(:method m1-go
    :parameters (?p - Person ?f ?o ?d - Floor)
    :task (solve-elevator)
    :precondition (and
        (goal ?p)
        (lift-at ?f)
        (origin ?p ?o)
        (destination ?p ?d)
    )
    :ordered-tasks (and
        (deliver-person ?p ?o ?d)
        (solve-elevator)
    )
)



(:method m2
    :parameters (?p - Person ?f ?o ?d - Floor)
    :task (deliver-person ?p ?o ?d)
    :precondition (and
        (lift-at ?f)
    )
    :ordered-tasks (and
            (move ?f ?o)
            (board ?p ?o)
            (move ?o ?d)
            (debark ?p ?d)
    )
)

(:action move
    :parameters (?f1 ?f2 - Floor)
    :precondition (and
            (lift-at ?f1)
        )
    :effect (and
            (not (lift-at ?f1))
            (lift-at ?f2)
    )
)


(:action board
    :parameters (?p - Person ?f - Floor)
    :precondition ( )
    :effect (and
        (boarded ?p)
    )
)

(:action debark
    :parameters (?p - Person ?f - Floor)
    :precondition (and
            (boarded ?p)
            (goal ?p)
        )
    :effect (and
            (not (boarded ?p))
            (not (goal ?p))
    )
)

)